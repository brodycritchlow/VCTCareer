name: Full CI Pipeline

on:
  push:
    branches: [ main, LandingPage ]
  pull_request:
    branches: [ main, LandingPage ]

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'VCTCareerBackend/**'
          frontend:
            - 'VCTCareerFrontend/**'

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: VCTCareerBackend -> target

    - name: Check formatting
      run: cargo fmt --check
      working-directory: VCTCareerBackend

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      working-directory: VCTCareerBackend

    - name: Run tests
      run: cargo test --verbose
      working-directory: VCTCareerBackend

    - name: Build release
      run: cargo build --release
      working-directory: VCTCareerBackend

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: VCTCareerFrontend/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: VCTCareerFrontend

    - name: Run Biome checks
      run: npm run check
      working-directory: VCTCareerFrontend

    - name: Build project
      run: npm run build
      working-directory: VCTCareerFrontend

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: always() && (needs.backend-test.result == 'success' || needs.backend-test.result == 'skipped') && (needs.frontend-test.result == 'success' || needs.frontend-test.result == 'skipped')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: VCTCareerFrontend/package-lock.json

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: VCTCareerBackend -> target

    - name: Build backend
      run: cargo build --release
      working-directory: VCTCareerBackend

    - name: Install frontend dependencies
      run: npm ci
      working-directory: VCTCareerFrontend

    - name: Build frontend
      run: npm run build
      working-directory: VCTCareerFrontend

    - name: Start backend server (background)
      run: |
        ./target/release/VCTCareerBackend &
        echo $! > backend.pid
        sleep 5
      working-directory: VCTCareerBackend

    - name: Test API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:8080/ || exit 1
        
        # Test Swagger UI
        curl -f http://localhost:8080/swagger-ui/ || exit 1
        
        echo "âœ… Backend API is responding correctly"

    - name: Cleanup
      if: always()
      run: |
        if [ -f VCTCareerBackend/backend.pid ]; then
          kill $(cat VCTCareerBackend/backend.pid) || true
        fi